// MatchManager.cs
using UnityEngine;

public class MatchManager : MonoBehaviour
{
    public GridManager grid;
    public Simulation sim;
    public int seedsPerPlayer = 20;

    public int WhiteScore { get; private set; }
    public int BlackScore { get; private set; }

    public PlayerTurn Turn { get; private set; } = PlayerTurn.White;
    public int WhiteSeedsLeft { get; private set; }
    public int BlackSeedsLeft { get; private set; }

    public bool PvPEnabled { get; private set; }
    public System.Action OnPlacementFinished;
    public System.Action<string> OnMatchEnded;

	public System.Action OnTurnChanged;


	void ToggleTurn()
	{
    	Turn = (Turn == PlayerTurn.White) ? PlayerTurn.Black : PlayerTurn.White;
    	OnTurnChanged?.Invoke();
	}

	void SetTurn(PlayerTurn t)
	{
    	Turn = t;
    	OnTurnChanged?.Invoke();
	}


	// –£–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —Å–∏–¥–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å —É –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
	public int SeedsLeftForCurrentPlayer()
	{
    	return (Turn == PlayerTurn.White) ? WhiteSeedsLeft : BlackSeedsLeft;
	}

	// –°–ø–∏—Å–∞—Ç—å N —Å–∏–¥–æ–≤ —É –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞, —Å–º–µ–Ω–∏—Ç—å —Ö–æ–¥ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
	public void ConsumeSeeds(int count)
	{
    	if (!PvPEnabled || sim.State != SimState.Placement) return;
    	if (count <= 0) return;

    	if (Turn == PlayerTurn.White)
        	WhiteSeedsLeft = Mathf.Max(0, WhiteSeedsLeft - count);
    	else
        	BlackSeedsLeft = Mathf.Max(0, BlackSeedsLeft - count);

    	// –û–±–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏ ‚Äî –∫–æ–Ω–µ—Ü placement
    	if (WhiteSeedsLeft <= 0 && BlackSeedsLeft <= 0)
    	{
        	sim.SetState(SimState.Editing);
        	OnPlacementFinished?.Invoke();
        	return;
    	}

    	// –ï—Å–ª–∏ —É –æ–±–æ–∏—Ö –æ—Å—Ç–∞–ª–∏—Å—å ‚Äî —á–µ—Ä–µ–¥—É–µ–º —Ö–æ–¥
    	if (WhiteSeedsLeft > 0 && BlackSeedsLeft > 0)
    	{
        	ToggleTurn();
    	}
    	else
    	{
        	// –£ –æ–¥–Ω–æ–≥–æ —Å–∏–¥–æ–≤ –Ω–µ—Ç ‚Äî —Ö–æ–¥ —É —Ç–æ–≥–æ, —É –∫–æ–≥–æ –µ—â—ë –µ—Å—Ç—å
        	if (WhiteSeedsLeft <= 0 && BlackSeedsLeft > 0) SetTurn(PlayerTurn.Black);
        	if (BlackSeedsLeft <= 0 && WhiteSeedsLeft > 0) SetTurn(PlayerTurn.White);
    	}
	}


    void Awake()
    {
        sim.OnScored += (w,b) => { WhiteScore+=w; BlackScore+=b; CheckEnd(); };
    }

    public void NewPvPMatch(int seeds)
    {
        PvPEnabled = true;
        WhiteScore = BlackScore = 0;
        WhiteSeedsLeft = BlackSeedsLeft = seeds;
        SetTurn(PlayerTurn.White);
    }

    public void EndMatchByButton()
    {
        EndMatch();
    }

    void CheckEnd()
    {
        if (!PvPEnabled) return;

        // –ù–µ—Ç –∂–∏–≤—ã—Ö?
        if (!AnyAlive())
        {
            EndMatch();
        }
    }

    bool AnyAlive()
    {
        for (int x=0; x<grid.width; x++)
        for (int y=0; y<grid.height; y++)
            if (grid.AliveNow[x,y]) return true;
        return false;
    }

    void EndMatch()
	{
    	PvPEnabled = false;

    	string result = (WhiteScore > BlackScore) ? "–ü–æ–±–µ–¥–∏–ª–∏ –ó–µ–ª–µ–Ω—ã–µ" :
                    	(BlackScore > WhiteScore) ? "–ü–æ–±–µ–¥–∏–ª–∏ –û—Ä–∞–Ω–∂–µ–≤—ã–µ" :
                    	"–ù–∏—á—å—è";

    	// –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    	OnMatchEnded?.Invoke($"{result}\n–ó–µ–ª–µ–Ω—ã–µ: {WhiteScore} ‚Äî –û—Ä–∞–Ω–∂–µ–≤—ã–µ: {BlackScore}");

    	sim.Pause();

    	// üîÑ —Å–±—Ä–æ—Å –æ—á–∫–æ–≤ –ø–æ—Å–ª–µ –º–∞—Ç—á–∞
    	WhiteScore = 0;
    	BlackScore = 0;
    	WhiteSeedsLeft = 0;
    	BlackSeedsLeft = 0;
    	Turn = PlayerTurn.White;
}


    public bool TryPlaceAt(Vector2Int index)
	{
    	if (!PvPEnabled || sim.State != SimState.Placement) return false;
    	if (grid.AliveNow[index.x, index.y]) return false; // –∑–∞–Ω—è—Ç–æ

    	var owner = (Turn == PlayerTurn.White) ? Owner.White : Owner.Black;
    	grid.SetCell(index.x, index.y, true, owner, instant: true);

    	// —Å–ø–∏—Å—ã–≤–∞–µ–º 1 —Å–∏–¥ —É —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    	if (Turn == PlayerTurn.White) WhiteSeedsLeft--;
    	else BlackSeedsLeft--;

    	// –æ–±–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏ ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫—É
    	if (WhiteSeedsLeft <= 0 && BlackSeedsLeft <= 0)
    	{
        	sim.SetState(SimState.Editing);
        	OnPlacementFinished?.Invoke(); // UI –∑–∞–ø—É—Å—Ç–∏—Ç —Å–∏–º—É–ª—è—Ü–∏—é/—á—Ç–æ –Ω—É–∂–Ω–æ
        	return true;
    	}

    	// –µ—Å–ª–∏ —É –æ–±–æ–∏—Ö –æ—Å—Ç–∞–ª–∏—Å—å —Å–∏–¥—ã ‚Äî —á–µ—Ä–µ–¥—É–µ–º —Ö–æ–¥ –∫–∞–∂–¥—ã–π —Ä–∞–∑
    	if (WhiteSeedsLeft > 0 && BlackSeedsLeft > 0)
    	{
        	ToggleTurn();
    	}
    	else
    	{
        	// —É –æ–¥–Ω–æ–≥–æ —Å–∏–¥–æ–≤ –Ω–µ—Ç ‚Äî —Ö–æ–¥ —É —Ç–æ–≥–æ, —É –∫–æ–≥–æ –µ—â—ë –µ—Å—Ç—å
        	if (WhiteSeedsLeft <= 0 && BlackSeedsLeft > 0) SetTurn(PlayerTurn.Black);
        	if (BlackSeedsLeft <= 0 && WhiteSeedsLeft > 0) SetTurn(PlayerTurn.White);
    	}
    	return true;
	}


	public void DisablePvP()
	{
    	PvPEnabled = false;
    	Turn = PlayerTurn.White;      // —Å–±—Ä–æ—Å —Ö–æ–¥–∞ –Ω–∞ –¥–µ—Ñ–æ–ª—Ç
    	// (–æ–ø—Ü.) –º–æ–∂–Ω–æ –æ–±–Ω—É–ª–∏—Ç—å –æ—á–∫–∏/—Å–µ–º–µ–Ω–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∂—ë—Å—Ç–∫–æ —Ä–µ—Å—Ç–∞—Ä—Ç–∏—Ç—å:
    	WhiteScore = 0; BlackScore = 0;
    	WhiteSeedsLeft = 0; BlackSeedsLeft = 0;
	}

}
